---
 - name: 1. Create a new VPC
   ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        state: present
   register: vpc

 - name: 2. a.Associate subnet1 to the VPC
   ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr1 }}"
        map_public: yes
        resource_tags:
                Name: "{{ subnet_name1 }}"
   register: subnet1

 - name: 2. b.Associate subnet2 to the VPC
   ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr2 }}"
        map_public: yes
        resource_tags:
                Name: "{{ subnet_name2 }}"
   register: subnet2

 - name: 2. b.Associate subnet3 to the VPC
   ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr3 }}"
        map_public: yes
        resource_tags:
                Name: "{{ subnet_name3 }}"
   register: subnet3


 - name: 3. Create Internet GateWay
   ec2_vpc_igw:
        vpc_id: "{{vpc.vpc.id }}"
        state: present
        region: us-east-1
        tags:
          Name: "{{ igw_name }}"
   register: igw

 - name: 4. Route IGW
   ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
            - "{{ subnet1.subnet.id }}"
        routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ route_name }}"

 - name: 5. Create Security Group
   ec2_group:
        name: "{{ security_group }}"
        description: Testing Nitesh Security Group
        vpc_id: "{{ vpc.vpc.id }}"
        validate_certs: false
        rules:
          - proto: tcp
            ports: 80
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            ports: 22
            cidr_ip: 0.0.0.0/0
   register: security_group

 - name: 6. Create an EC2 key
   ec2_key:
       name: ansiblelearn.nitesh
   register: ec2_key

 - name: 7. Save private key
   copy:
       content: "{{ ec2_key.key.private_key }}"
       dest: "/etc/ansible/keys_ansible.pem"
       mode: 0600
   when: ec2_key.changed
  
 - name: 8. Create EC2 server
   ec2:
        image: ami-14c5486b
        wait: true
        instance_type: t2.micro
        group_id: "{{ security_group.group_id }}"
        vpc_subnet_id: "{{ item }}"
        key_name: "{{ ec2_key.key.name }}"
        count: 1
        region: us-east-1
   with_items: 
        - "{{ subnet1.subnet.id }}"
   register: ec2
   tags:
        - ec2
